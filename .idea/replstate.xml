<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1473942642392">{:repl-history {:ide [], :local [&quot;(chan)&quot; &quot;(chan 10)&quot; &quot;(let [c (chan 10)]\n  (&gt;!! c \&quot;hello\&quot;)\n  (assert (= \&quot;hello\&quot; (&lt;!! c)))\n  (close! c))&quot; &quot;(let [c (chan)]\n  (thread (&gt;!! c \&quot;hello\&quot;))\n  (assert (= \&quot;hello\&quot; (&lt;!! c)))\n  (close! c))&quot; &quot;(let [c (chan)]\n  (go (&gt;! c \&quot;hello\&quot;))\n  (assert (= \&quot;hello\&quot; (&lt;!! (go (&lt;! c)))))\n  (close! c))&quot; &quot;(let [c1 (chan)\n      c2 (chan)]\n  (thread (while true\n            (let [[v ch] (alts!! [c1 c2])]\n              (println \&quot;Read\&quot; v \&quot;from\&quot; ch))))\n  (&gt;!! c1 \&quot;hi\&quot;)\n  (&gt;!! c2 \&quot;there\&quot;))&quot; &quot;(let [c1 (chan)\n      c2 (chan)]\n  (go (while true\n        (let [[v ch] (alts! [c1 c2])]\n          (println \&quot;Read\&quot; v \&quot;from\&quot; ch))))\n  (go (&gt;! c1 \&quot;hi\&quot;))\n  (go (&gt;! c2 \&quot;there\&quot;)))&quot; &quot;(let [t (timeout 100)\n      begin (System/currentTimeMillis)]\n  (&lt;!! t)\n  (println \&quot;Waited\&quot; (- (System/currentTimeMillis) begin)))&quot; &quot;(timeout 100)&quot; &quot;(let [c (chan)\n      begin (System/currentTimeMillis)]\n  (alts!! [c (timeout 100)])\n  (println \&quot;Gave up after\&quot; (- (System/currentTimeMillis) begin)))&quot; &quot;(chan (dropping-buffer 10))&quot; &quot;(chan (sliding-buffer 10))&quot; &quot;(let [n 1000\n      cs (repeatedly n chan)\n      begin (System/currentTimeMillis)]\n  (doseq [c cs] (go (&gt;! c \&quot;hi\&quot;)))\n  (dotimes [i n]\n    (let [[v c] (alts!! cs)]\n      (assert (= \&quot;hi\&quot; v))))\n  (println \&quot;Read\&quot; n \&quot;msgs in\&quot; (- (System/currentTimeMillis) begin) \&quot;ms\&quot;))&quot; &quot;(def (chan))&quot; &quot;(def a (chan))&quot; &quot;(prn (&lt;!! a))&quot; &quot;(&gt;!! a \&quot;allo\&quot;)&quot; &quot;(go (&gt;!! a \&quot;allo\&quot;))&quot; &quot;(go (prn (&lt;!! a)))&quot; &quot;(go (&gt;! a \&quot;allo\&quot;))&quot; &quot;(go (&gt;! a \&quot;hallo GCE\&quot;))&quot; &quot;(go (&gt;! a \&quot;hello GCE\&quot;))&quot; &quot;(go (prn (&lt;! a)))&quot; &quot;(def b (chan 10))&quot; &quot;ad&quot; &quot;a&quot; &quot;(&gt;!! b \&quot;this is okay\&quot;)&quot; &quot;b&quot; &quot;(let [c (chan)]\n  (close! c))&quot; &quot;(&gt;!! b \&quot;this is okay for ten times\&quot;)&quot; &quot;(prn (&lt;!! b))&quot; &quot;(close! b)&quot; &quot;(close! a)&quot; &quot;(reset)&quot;], :remote []}}</component>
</project>